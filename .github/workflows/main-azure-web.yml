name: Build, Push & Deploy Vulnera to Azure Container Apps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: vulnera-app
  DOCKERFILE_PATH: scripts/docker/Dockerfile
  TARGET_PORT: "3000"

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache cargo registry/git/target
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build (target)
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Rust project (release)
        run: cargo build --release

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR (using az)
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build Docker image
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          IMAGE="${ACR}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -f ${{ env.DOCKERFILE_PATH }} -t "${IMAGE}" -t "${ACR}/${{ env.IMAGE_NAME }}:latest" .
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
        id: build

      - name: Push Docker image
        env:
          ACR: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          IMAGE="${ACR}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker push "${ACR}/${{ env.IMAGE_NAME }}:latest"
          docker push "${IMAGE}"

      - name: Deploy (create or update) Azure Container App
        # uses azure/container-apps-deploy-action is an alternative; here we use az CLI for explicit control
        uses: azure/CLI@v1
        with:
          azcliversion: '2.58.0'
          inlineScript: |
            set -euo pipefail

            RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
            APP="${{ secrets.CONTAINERAPP_NAME }}"
            ENV_NAME="${{ secrets.CONTAINERAPPS_ENV }}"
            ACR_SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
            IMAGE="${ACR_SERVER}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            TARGET_PORT="${{ env.TARGET_PORT }}"

            echo "Checking if Container App '${APP}' exists in resource group '${RG}'..."
            if az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1; then
              echo "Container App exists -> updating image and env vars (creating a new revision)..."
              az containerapp update \
                --name "$APP" \
                --resource-group "$RG" \
                --image "$IMAGE" \
                --target-port $TARGET_PORT \
                --set-env-vars \
                  VULNERA__SERVER__HOST='0.0.0.0' \
                  VULNERA__SERVER__PORT='3000' \
                  VULNERA__CACHE__DIRECTORY='.vulnera_cache' \
                  VULNERA__CACHE__TTL_HOURS='24' \
                  VULNERA__ANALYSIS__MAX_CONCURRENT_PACKAGES='3' \
                  VULNERA__RECOMMENDATIONS__EXCLUDE_PRERELEASES='false' \
                  VULNERA__RECOMMENDATIONS__MAX_VERSION_QUERIES_PER_REQUEST='50' \
                  VULNERA__LOGGING__LEVEL='info' \
                  VULNERA__LOGGING__FORMAT='json' \
                  ENV='production' \
                  VULNERA__SERVER__ALLOWED_ORIGINS__0='${{ secrets.CORS_ALLOWED_ORIGIN }}' \
                  VULNERA__SERVER__ALLOWED_ORIGINS__1='${{ secrets.CORS_ALLOWED_ORIGIN_SECONDARY }}' \
                  VULNERA__APIS__NVD__API_KEY='${{ secrets.NVD_API_KEY }}' \
                  VULNERA__APIS__GHSA__TOKEN='${{ secrets.GHSA_TOKEN }}'
            else
              echo "Container App does not exist -> creating it..."
              az containerapp create \
                --name "$APP" \
                --resource-group "$RG" \
                --environment "$ENV_NAME" \
                --image "$IMAGE" \
                --target-port $TARGET_PORT \
                --ingress external \
                --registry-server "$ACR_SERVER" \
                --registry-user "${{ secrets.ACR_USERNAME }}" \
                --registry-password "${{ secrets.ACR_PASSWORD }}" \
                --env-vars \
                  VULNERA__SERVER__HOST='0.0.0.0' \
                  VULNERA__SERVER__PORT='3000' \
                  VULNERA__CACHE__DIRECTORY='.vulnera_cache' \
                  VULNERA__CACHE__TTL_HOURS='24' \
                  VULNERA__ANALYSIS__MAX_CONCURRENT_PACKAGES='3' \
                  VULNERA__RECOMMENDATIONS__EXCLUDE_PRERELEASES='false' \
                  VULNERA__RECOMMENDATIONS__MAX_VERSION_QUERIES_PER_REQUEST='50' \
                  VULNERA__LOGGING__LEVEL='info' \
                  VULNERA__LOGGING__FORMAT='json' \
                  ENV='development' \
                  VULNERA__SERVER__ALLOWED_ORIGINS__0='${{ secrets.CORS_ALLOWED_ORIGIN }}' \
                  VULNERA__SERVER__ALLOWED_ORIGINS__1='${{ secrets.CORS_ALLOWED_ORIGIN_SECONDARY }}' \
            fi

      - name: Show Container App URL
        run: |
          az containerapp show --name ${{ secrets.CONTAINERAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv
